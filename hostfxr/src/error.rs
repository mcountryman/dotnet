use std::{
  error::Error,
  fmt::{Display, Formatter},
  num::TryFromIntError,
};

pub type HostFxrResult<T> = Result<T, HostFxrError>;

#[allow(non_camel_case_types)]
#[derive(Debug)]
pub enum HostFxrError {
  Io(std::io::Error),
  Library(libloading::Error),
  Unexpected(i32),
  ImportNotFound,
  MissingHostPath,
  MissingDotnetRoot,
  TryFromIntError(TryFromIntError),

  BadHandle,
  PoisonedHandle,

  // Failure
  InvalidArgFailure,
  CoreHostLibLoadFailure,
  CoreHostLibMissingFailure,
  CoreHostEntryPointFailure,
  CoreHostCurHostFindFailure,
  // unused
  CoreClrResolveFailure,
  CoreClrBindFailure,
  CoreClrInitFailure,
  CoreClrExeFailure,
  ResolverInitFailure,
  ResolverResolveFailure,
  LibHostCurExeFindFailure,
  LibHostInitFailure,
  // unused
  LibHostExecModeFailure,
  LibHostSdkFindFailure,
  LibHostInvalidArgs,
  InvalidConfigFile,
  AppArgNotRunnable,
  AppHostExeNotBoundFailure,
  FrameworkMissingFailure,
  HostApiFailed,
  HostApiBufferTooSmall,
  LibHostUnknownCommand,
  LibHostAppRootFindFailure,
  SdkResolverResolveFailure,
  FrameworkCompatFailure,
  FrameworkCompatRetry,
  // unused
  BundleExtractionFailure,
  BundleExtractionIOError,
  LibHostDuplicateProperty,
  HostApiUnsupportedVersion,
  HostInvalidState,
  HostPropertyNotFound,
  CoreHostIncompatibleConfig,
  HostApiUnsupportedScenario,

  COR_E_ABANDONEDMUTEX,
  COR_E_AMBIGUOUSIMPLEMENTATION,
  COR_E_AMBIGUOUSMATCH,
  COR_E_APPDOMAINUNLOADED,
  COR_E_APPLICATION,
  COR_E_ARGUMENT,
  COR_E_ARGUMENTOUTOFRANGE,
  COR_E_ARITHMETIC,
  COR_E_ARRAYTYPEMISMATCH,
  COR_E_BADEXEFORMAT,
  COR_E_BADIMAGEFORMAT,
  COR_E_CANNOTUNLOADAPPDOMAIN,
  COR_E_CODECONTRACTFAILED,
  COR_E_CONTEXTMARSHAL,
  COR_E_CUSTOMATTRIBUTEFORMAT,
  COR_E_DATAMISALIGNED,
  COR_E_DIRECTORYNOTFOUND,
  COR_E_DIVIDEBYZERO,
  COR_E_DLLNOTFOUND,
  COR_E_DUPLICATEWAITOBJECT,
  COR_E_ENDOFSTREAM,
  COR_E_ENTRYPOINTNOTFOUND,
  COR_E_EXCEPTION,
  COR_E_EXECUTIONENGINE,
  COR_E_FIELDACCESS,
  COR_E_FILELOAD,
  COR_E_FILENOTFOUND,
  COR_E_FORMAT,
  COR_E_INDEXOUTOFRANGE,
  COR_E_INSUFFICIENTEXECUTIONSTACK,
  COR_E_INSUFFICIENTMEMORY,
  COR_E_INVALIDCAST,
  COR_E_INVALIDCOMOBJECT,
  COR_E_INVALIDFILTERCRITERIA,
  COR_E_INVALIDOLEVARIANTTYPE,
  COR_E_INVALIDOPERATION,
  COR_E_INVALIDPROGRAM,
  COR_E_IO,
  COR_E_KEYNOTFOUND,
  COR_E_MARSHALDIRECTIVE,
  COR_E_MEMBERACCESS,
  COR_E_METHODACCESS,
  COR_E_MISSINGFIELD,
  COR_E_MISSINGMANIFESTRESOURCE,
  COR_E_MISSINGMEMBER,
  COR_E_MISSINGMETHOD,
  COR_E_MISSINGSATELLITEASSEMBLY,
  COR_E_MULTICASTNOTSUPPORTED,
  COR_E_NOTFINITENUMBER,
  COR_E_NOTSUPPORTED,
  COR_E_OBJECTDISPOSED,
  COR_E_OPERATIONCANCELED,
  COR_E_OUTOFMEMORY,
  COR_E_OVERFLOW,
  COR_E_PATHTOOLONG,
  COR_E_PLATFORMNOTSUPPORTED,
  COR_E_RANK,
  COR_E_REFLECTIONTYPELOAD,
  COR_E_RUNTIMEWRAPPED,
  COR_E_SAFEARRAYRANKMISMATCH,
  COR_E_SAFEARRAYTYPEMISMATCH,
  COR_E_SECURITY,
  COR_E_SERIALIZATION,
  COR_E_STACKOVERFLOW,
  COR_E_SYNCHRONIZATIONLOCK,
  COR_E_SYSTEM,
  COR_E_TARGET,
  COR_E_TARGETINVOCATION,
  COR_E_TARGETPARAMCOUNT,
  COR_E_THREADABORTED,
  COR_E_THREADINTERRUPTED,
  COR_E_THREADSTART,
  COR_E_THREADSTATE,
  COR_E_TIMEOUT,
  COR_E_TYPEACCESS,
  COR_E_TYPEINITIALIZATION,
  COR_E_TYPELOAD,
  COR_E_TYPEUNLOADED,
  COR_E_UNAUTHORIZEDACCESS,
  COR_E_VERIFICATION,
  COR_E_WAITHANDLECANNOTBEOPENED,
  CO_E_NOTINITIALIZED,
  DISP_E_OVERFLOW,
  E_BOUNDS,
  E_CHANGED_STATE,
  E_FILENOTFOUND,
  E_FAIL,
  E_HANDLE,
  E_INVALIDARG,
  E_NOTIMPL,
  E_POINTER,
  ERROR_MRM_MAP_NOT_FOUND,
  ERROR_TIMEOUT,
  RO_E_CLOSED,
  RPC_E_CHANGED_MODE,
  TYPE_E_TYPEMISMATCH,
}

impl HostFxrError {
  pub fn from_status(status: i32) -> HostFxrResult<()> {
    #[allow(unreachable_patterns)]
    #[allow(overflowing_literals)]
    match status {
      0 | 0x00000001 | 0x00000002 => Ok(()),

      // source  : https://github.com/dotnet/runtime/blob/1d9e50cb4735df46d3de0cee5791e97295eaf588/src/installer/corehost/error_codes.h#L8
      // find    : (\w+)\s*=\s*((?:0x)?[\da-f]+),
      // replace : $2 => Err(HostFxrError::$1),
      0x80008081 => Err(HostFxrError::InvalidArgFailure),
      0x80008082 => Err(HostFxrError::CoreHostLibLoadFailure),
      0x80008083 => Err(HostFxrError::CoreHostLibMissingFailure),
      0x80008084 => Err(HostFxrError::CoreHostEntryPointFailure),
      0x80008085 => Err(HostFxrError::CoreHostCurHostFindFailure),
      // 0x80008086 => Err(HostFxrError::unused),
      0x80008087 => Err(HostFxrError::CoreClrResolveFailure),
      0x80008088 => Err(HostFxrError::CoreClrBindFailure),
      0x80008089 => Err(HostFxrError::CoreClrInitFailure),
      0x8000808a => Err(HostFxrError::CoreClrExeFailure),
      0x8000808b => Err(HostFxrError::ResolverInitFailure),
      0x8000808c => Err(HostFxrError::ResolverResolveFailure),
      0x8000808d => Err(HostFxrError::LibHostCurExeFindFailure),
      0x8000808e => Err(HostFxrError::LibHostInitFailure),
      // 0x8000808f => Err(HostFxrError::unused),
      0x80008090 => Err(HostFxrError::LibHostExecModeFailure),
      0x80008091 => Err(HostFxrError::LibHostSdkFindFailure),
      0x80008092 => Err(HostFxrError::LibHostInvalidArgs),
      0x80008093 => Err(HostFxrError::InvalidConfigFile),
      0x80008094 => Err(HostFxrError::AppArgNotRunnable),
      0x80008095 => Err(HostFxrError::AppHostExeNotBoundFailure),
      0x80008096 => Err(HostFxrError::FrameworkMissingFailure),
      0x80008097 => Err(HostFxrError::HostApiFailed),
      0x80008098 => Err(HostFxrError::HostApiBufferTooSmall),
      0x80008099 => Err(HostFxrError::LibHostUnknownCommand),
      0x8000809a => Err(HostFxrError::LibHostAppRootFindFailure),
      0x8000809b => Err(HostFxrError::SdkResolverResolveFailure),
      0x8000809c => Err(HostFxrError::FrameworkCompatFailure),
      0x8000809d => Err(HostFxrError::FrameworkCompatRetry),
      // 0x8000809e => Err(HostFxrError::unused),
      0x8000809f => Err(HostFxrError::BundleExtractionFailure),
      0x800080a0 => Err(HostFxrError::BundleExtractionIOError),
      0x800080a1 => Err(HostFxrError::LibHostDuplicateProperty),
      0x800080a2 => Err(HostFxrError::HostApiUnsupportedVersion),
      0x800080a3 => Err(HostFxrError::HostInvalidState),
      0x800080a4 => Err(HostFxrError::HostPropertyNotFound),
      0x800080a5 => Err(HostFxrError::CoreHostIncompatibleConfig),
      0x800080a6 => Err(HostFxrError::HostApiUnsupportedScenario),

      // source  : https://github.com/dotnet/runtime/blob/1d9e50cb4735df46d3de0cee5791e97295eaf588/src/libraries/Common/src/System/HResults.cs#L25
      // find    : internal const int (\w+) = unchecked\(\(int\)([^\)]+)\);
      // replace : $2 => Err(HostFxrError::$1),
      0x8013152D => Err(HostFxrError::COR_E_ABANDONEDMUTEX),
      0x8013106A => Err(HostFxrError::COR_E_AMBIGUOUSIMPLEMENTATION),
      0x8000211D => Err(HostFxrError::COR_E_AMBIGUOUSMATCH),
      0x80131014 => Err(HostFxrError::COR_E_APPDOMAINUNLOADED),
      0x80131600 => Err(HostFxrError::COR_E_APPLICATION),
      0x80070057 => Err(HostFxrError::COR_E_ARGUMENT),
      0x80131502 => Err(HostFxrError::COR_E_ARGUMENTOUTOFRANGE),
      0x80070216 => Err(HostFxrError::COR_E_ARITHMETIC),
      0x80131503 => Err(HostFxrError::COR_E_ARRAYTYPEMISMATCH),
      0x800700C1 => Err(HostFxrError::COR_E_BADEXEFORMAT),
      0x8007000B => Err(HostFxrError::COR_E_BADIMAGEFORMAT),
      0x80131015 => Err(HostFxrError::COR_E_CANNOTUNLOADAPPDOMAIN),
      0x80131542 => Err(HostFxrError::COR_E_CODECONTRACTFAILED),
      0x80131504 => Err(HostFxrError::COR_E_CONTEXTMARSHAL),
      0x80131605 => Err(HostFxrError::COR_E_CUSTOMATTRIBUTEFORMAT),
      0x80131541 => Err(HostFxrError::COR_E_DATAMISALIGNED),
      0x80070003 => Err(HostFxrError::COR_E_DIRECTORYNOTFOUND),
      0x80020012 => Err(HostFxrError::COR_E_DIVIDEBYZERO), // DISP_E_DIVBYZERO
      0x80131524 => Err(HostFxrError::COR_E_DLLNOTFOUND),
      0x80131529 => Err(HostFxrError::COR_E_DUPLICATEWAITOBJECT),
      0x80070026 => Err(HostFxrError::COR_E_ENDOFSTREAM),
      0x80131523 => Err(HostFxrError::COR_E_ENTRYPOINTNOTFOUND),
      0x80131500 => Err(HostFxrError::COR_E_EXCEPTION),
      0x80131506 => Err(HostFxrError::COR_E_EXECUTIONENGINE),
      0x80131507 => Err(HostFxrError::COR_E_FIELDACCESS),
      0x80131621 => Err(HostFxrError::COR_E_FILELOAD),
      0x80070002 => Err(HostFxrError::COR_E_FILENOTFOUND),
      0x80131537 => Err(HostFxrError::COR_E_FORMAT),
      0x80131508 => Err(HostFxrError::COR_E_INDEXOUTOFRANGE),
      0x80131578 => Err(HostFxrError::COR_E_INSUFFICIENTEXECUTIONSTACK),
      0x8013153D => Err(HostFxrError::COR_E_INSUFFICIENTMEMORY),
      0x80004002 => Err(HostFxrError::COR_E_INVALIDCAST),
      0x80131527 => Err(HostFxrError::COR_E_INVALIDCOMOBJECT),
      0x80131601 => Err(HostFxrError::COR_E_INVALIDFILTERCRITERIA),
      0x80131531 => Err(HostFxrError::COR_E_INVALIDOLEVARIANTTYPE),
      0x80131509 => Err(HostFxrError::COR_E_INVALIDOPERATION),
      0x8013153A => Err(HostFxrError::COR_E_INVALIDPROGRAM),
      0x80131620 => Err(HostFxrError::COR_E_IO),
      0x80131577 => Err(HostFxrError::COR_E_KEYNOTFOUND),
      0x80131535 => Err(HostFxrError::COR_E_MARSHALDIRECTIVE),
      0x8013151A => Err(HostFxrError::COR_E_MEMBERACCESS),
      0x80131510 => Err(HostFxrError::COR_E_METHODACCESS),
      0x80131511 => Err(HostFxrError::COR_E_MISSINGFIELD),
      0x80131532 => Err(HostFxrError::COR_E_MISSINGMANIFESTRESOURCE),
      0x80131512 => Err(HostFxrError::COR_E_MISSINGMEMBER),
      0x80131513 => Err(HostFxrError::COR_E_MISSINGMETHOD),
      0x80131536 => Err(HostFxrError::COR_E_MISSINGSATELLITEASSEMBLY),
      0x80131514 => Err(HostFxrError::COR_E_MULTICASTNOTSUPPORTED),
      0x80131528 => Err(HostFxrError::COR_E_NOTFINITENUMBER),
      0x80131515 => Err(HostFxrError::COR_E_NOTSUPPORTED),
      0x80131622 => Err(HostFxrError::COR_E_OBJECTDISPOSED),
      0x8013153B => Err(HostFxrError::COR_E_OPERATIONCANCELED),
      0x8007000E => Err(HostFxrError::COR_E_OUTOFMEMORY),
      0x80131516 => Err(HostFxrError::COR_E_OVERFLOW),
      0x800700CE => Err(HostFxrError::COR_E_PATHTOOLONG),
      0x80131539 => Err(HostFxrError::COR_E_PLATFORMNOTSUPPORTED),
      0x80131517 => Err(HostFxrError::COR_E_RANK),
      0x80131602 => Err(HostFxrError::COR_E_REFLECTIONTYPELOAD),
      0x8013153E => Err(HostFxrError::COR_E_RUNTIMEWRAPPED),
      0x80131538 => Err(HostFxrError::COR_E_SAFEARRAYRANKMISMATCH),
      0x80131533 => Err(HostFxrError::COR_E_SAFEARRAYTYPEMISMATCH),
      0x8013150A => Err(HostFxrError::COR_E_SECURITY),
      0x8013150C => Err(HostFxrError::COR_E_SERIALIZATION),
      0x800703E9 => Err(HostFxrError::COR_E_STACKOVERFLOW),
      0x80131518 => Err(HostFxrError::COR_E_SYNCHRONIZATIONLOCK),
      0x80131501 => Err(HostFxrError::COR_E_SYSTEM),
      0x80131603 => Err(HostFxrError::COR_E_TARGET),
      0x80131604 => Err(HostFxrError::COR_E_TARGETINVOCATION),
      0x8002000E => Err(HostFxrError::COR_E_TARGETPARAMCOUNT),
      0x80131530 => Err(HostFxrError::COR_E_THREADABORTED),
      0x80131519 => Err(HostFxrError::COR_E_THREADINTERRUPTED),
      0x80131525 => Err(HostFxrError::COR_E_THREADSTART),
      0x80131520 => Err(HostFxrError::COR_E_THREADSTATE),
      0x80131505 => Err(HostFxrError::COR_E_TIMEOUT),
      0x80131543 => Err(HostFxrError::COR_E_TYPEACCESS),
      0x80131534 => Err(HostFxrError::COR_E_TYPEINITIALIZATION),
      0x80131522 => Err(HostFxrError::COR_E_TYPELOAD),
      0x80131013 => Err(HostFxrError::COR_E_TYPEUNLOADED),
      0x80070005 => Err(HostFxrError::COR_E_UNAUTHORIZEDACCESS),
      0x8013150D => Err(HostFxrError::COR_E_VERIFICATION),
      0x8013152C => Err(HostFxrError::COR_E_WAITHANDLECANNOTBEOPENED),
      0x800401F0 => Err(HostFxrError::CO_E_NOTINITIALIZED),
      0x8002000A => Err(HostFxrError::DISP_E_OVERFLOW),
      0x8000000B => Err(HostFxrError::E_BOUNDS),
      0x8000000C => Err(HostFxrError::E_CHANGED_STATE),
      0x80004005 => Err(HostFxrError::E_FAIL),
      0x80070006 => Err(HostFxrError::E_HANDLE),
      0x80004001 => Err(HostFxrError::E_NOTIMPL),
      0x80004003 => Err(HostFxrError::E_POINTER),
      0x80073B1F => Err(HostFxrError::ERROR_MRM_MAP_NOT_FOUND),
      0x800705B4 => Err(HostFxrError::ERROR_TIMEOUT),
      0x80000013 => Err(HostFxrError::RO_E_CLOSED),
      0x80010106 => Err(HostFxrError::RPC_E_CHANGED_MODE),
      0x80028CA0 => Err(HostFxrError::TYPE_E_TYPEMISMATCH),

      _ => Err(HostFxrError::Unexpected(status)),
    }
  }
}

impl From<libloading::Error> for HostFxrError {
  fn from(inner: libloading::Error) -> Self {
    Self::Library(inner)
  }
}

impl From<TryFromIntError> for HostFxrError {
  fn from(inner: TryFromIntError) -> Self {
    Self::TryFromIntError(inner)
  }
}

impl Display for HostFxrError {
  fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
    write!(f, "{:?}", self)
  }
}

impl Error for HostFxrError {}
